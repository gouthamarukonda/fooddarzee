from django.shortcuts import render
from django.db import connection
from django.template import loader, Context
from django.http import HttpResponse
from datetime import date
import datetime
import time
from django.views.decorators.csrf import csrf_exempt, csrf_protect, requires_csrf_token
from .models import Holidays
from collections import Counter
import django_excel

def dates_between(start, end):
    while start < end:
        yield start
        start += datetime.timedelta(1)

def count_weekday(start, end):
    counter = Counter()
    counter['Sun']=0
    counter['Mon']=0
    counter['Tue']=0
    counter['Wed']=0
    counter['Thu']=0
    counter['Fri']=0
    counter['Sat']=0
    for date in dates_between(start, end):
        counter[date.strftime('%a')] += 1
    return counter

def my_custom_sql(d,ti,t):
	with connection.cursor() as cursor:
		start_date = date.today()
		if start_date.weekday()==6:
			start_date+=datetime.timedelta(1)
		end_date = d
		w=count_weekday(start_date,end_date)
		start_week_days = min(start_date.weekday(), 5) + 1
		end_week_days = min(end_date.weekday(), 5) + 1
		no_of_weeks = end_date.isocalendar()[1] - start_date.isocalendar()[1]
		working_days = (6 * no_of_weeks) + end_week_days - start_week_days
		if start_date.weekday() < 6:
			working_days += 1
		x=working_days
		weekday = ['MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY','SUNDAY']
		sun = w['Sun']
		mon = w['Mon']
		tue = w['Tue']
		wed = w['Wed']
		thu = w['Thu']
		fri = w['Fri']
		sat = w['Sat']
		if end_date.weekday()==6:
			menu_date=d-datetime.timedelta(days=1)
		else:
			menu_date=d
		if ti=='Morning':
			if t=='detailed':
				cursor.execute("WITH BREAKFAST1 AS "
				+"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
				"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
				"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
				"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
				"SELECT DISTINCT B1.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID,USER_PROFILE.CALORIES,USER_PROFILE.BREAKFAST,USER_PROFILE.LUNCH,USER_PROFILE.SNACKS,USER_PROFILE.DINNER,G.TEMP_ID FROM (SELECT USER_FOOD_PREF.USER_ID,USER_FOOD_PREF.TYPE,ROW_NUMBER() OVER(PARTITION BY USER_FOOD_PREF.USER_ID ORDER BY USER_FOOD_PREF.ID DESC) AS RN FROM USER_FOOD_PREF,USER_PROFILE,DAY WHERE USER_PROFILE.ID=USER_FOOD_PREF.USER_ID AND USER_FOOD_PREF.MEAL_TIME='Breakfast' AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 ORDER BY USER_FOOD_PREF.ID DESC) AS B1,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Morning') AS A,SKIP_MOR,SKIP_EVE,HOLI,(SELECT X1.ID,g.i AS TEMP_ID FROM (SELECT * FROM USER_PROFILE,HOLI,(SELECT SKIP_MOR.USER_ID AS UI,SKIP_MOR.SKIPPER AS SKIP1,SKIP_EVE.SKIPPER AS SKIP2 FROM SKIP_MOR,SKIP_EVE WHERE SKIP_MOR.USER_ID=SKIP_EVE.USER_ID) AS X2 WHERE USER_PROFILE.ID=HOLI.USER_ID AND USER_PROFILE.ID=X2.UI) AS X1 cross join lateral generate_series(1,LEAST(BREAKFAST,(MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP1*(BREAKFAST+LUNCH))+(SKIP2*(SNACKS+DINNER))))) as g(i)) AS G WHERE STATUS='Active' AND (MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0) AND USER_PROFILE.ID = A.USER_ID AND B1.USER_ID=USER_PROFILE.ID AND G.TEMP_ID=B1.RN AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID  AND "+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s AND USER_PROFILE.ID=G.ID)"+
				"SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,USERS.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = %s AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,MEAL_PREF_CHANGE.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast' AND MEAL_PREF_CHANGE.DATE = %s)"+
				"SELECT USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_BFST AS CATEGORY,string_agg( DISTINCT USALL.ALLERGEN_NAME,', ') AS ALLERGEN FROM MENU,(SELECT USDISH.DISH_ID,USDISH.NAME AS DISH_NAME,USDISH.USER_ID,ALLER.NAME AS ALLERGEN_NAME,USDISH.FIRST_NAME,USDISH.LAST_NAME,USDISH.DIET_GOAL_MEAL_PLAN_ID,USDISH.CALORIES,USDISH.TYPE,USDISH.BREAKFAST,USDISH.LUNCH,USDISH.SNACKS,USDISH.DINNER FROM (SELECT USERS1.BREAKFAST,USERS1.LUNCH,USERS1.SNACKS,USERS1.DINNER,DISH.ID AS DISH_ID,USERS1.ID AS USER_ID,DISH.NAME,USERS1.FIRST_NAME,USERS1.LAST_NAME,USERS1.DIET_GOAL_MEAL_PLAN_ID,USERS1.CALORIES,USERS1.TYPE FROM USERS1,DISH) AS USDISH LEFT JOIN (SELECT USER_ALLERGENS.USER_ID,DISH_ALLERGENS.DISH_ID,ALLERGENS.NAME FROM USER_ALLERGENS,DISH_ALLERGENS,ALLERGENS WHERE ALLERGENS.ID=DISH_ALLERGENS.ALLERGEN_ID AND ALLERGENS.ID=USER_ALLERGENS.ALLERGEN_ID) AS ALLER ON USDISH.USER_ID = ALLER.USER_ID AND USDISH.DISH_ID = ALLER.DISH_ID) AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = %s AND MENU.MEAL_TIME='Breakfast' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE AND MENU.DISH_ID = USALL.DISH_ID AND CALORIE_FORMULAE.CALORIES = USALL.CALORIES AND CALORIE_FORMULAE.DIET_GOAL_MEAL_PLAN_ID=USALL.DIET_GOAL_MEAL_PLAN_ID AND CALORIE_FORMULAE.NUM_BFST=USALL.BREAKFAST AND CALORIE_FORMULAE.NUM_LUNCH=USALL.LUNCH AND CALORIE_FORMULAE.NUM_SNACKS=USALL.SNACKS AND CALORIE_FORMULAE.NUM_DINNER=USALL.DINNER GROUP BY USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_BFST),"+
				"LUNCH1 AS "+
				"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
				"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
				"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
				"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
				"SELECT DISTINCT B1.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID,USER_PROFILE.CALORIES,USER_PROFILE.BREAKFAST,USER_PROFILE.LUNCH,USER_PROFILE.SNACKS,USER_PROFILE.DINNER,G.TEMP_ID FROM (SELECT USER_FOOD_PREF.USER_ID,USER_FOOD_PREF.TYPE,ROW_NUMBER() OVER(PARTITION BY USER_FOOD_PREF.USER_ID ORDER BY USER_FOOD_PREF.ID DESC) AS RN FROM USER_FOOD_PREF,USER_PROFILE,DAY WHERE USER_PROFILE.ID=USER_FOOD_PREF.USER_ID AND USER_FOOD_PREF.MEAL_TIME='Lunch' AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 ORDER BY USER_FOOD_PREF.ID DESC) AS B1,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Morning') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI,(SELECT X1.ID,g.i AS TEMP_ID FROM (SELECT * FROM USER_PROFILE,HOLI,(SELECT SKIP_MOR.USER_ID AS UI,SKIP_MOR.SKIPPER AS SKIP1,SKIP_EVE.SKIPPER AS SKIP2 FROM SKIP_MOR,SKIP_EVE WHERE SKIP_MOR.USER_ID=SKIP_EVE.USER_ID) AS X2 WHERE USER_PROFILE.ID=HOLI.USER_ID AND USER_PROFILE.ID=X2.UI) AS X1 cross join lateral generate_series(1,LEAST(LUNCH,(MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP1*(BREAKFAST+LUNCH))+(SKIP2*(SNACKS+DINNER))))) as g(i)) AS G WHERE STATUS='Active' AND MEAL_TOKENS-BREAKFAST-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND LUNCH=1 AND USER_PROFILE.ID = A.USER_ID AND B1.USER_ID=USER_PROFILE.ID AND G.TEMP_ID=B1.RN AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND "+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s AND USER_PROFILE.ID=G.ID)"+
				"SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,USERS.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = %s AND MEAL_PREF_CHANGE.MEAL_TIME='Lunch') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,MEAL_PREF_CHANGE.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Lunch' AND MEAL_PREF_CHANGE.DATE = %s)"+
				"SELECT USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_LUNCH AS CATEGORY,string_agg( DISTINCT USALL.ALLERGEN_NAME,', ') AS ALLERGEN FROM MENU,(SELECT USDISH.DISH_ID,USDISH.NAME AS DISH_NAME,USDISH.USER_ID,ALLER.NAME AS ALLERGEN_NAME,USDISH.FIRST_NAME,USDISH.LAST_NAME,USDISH.DIET_GOAL_MEAL_PLAN_ID,USDISH.CALORIES,USDISH.TYPE,USDISH.BREAKFAST,USDISH.LUNCH,USDISH.SNACKS,USDISH.DINNER FROM (SELECT USERS1.BREAKFAST,USERS1.LUNCH,USERS1.SNACKS,USERS1.DINNER,DISH.ID AS DISH_ID,USERS1.ID AS USER_ID,DISH.NAME,USERS1.FIRST_NAME,USERS1.LAST_NAME,USERS1.DIET_GOAL_MEAL_PLAN_ID,USERS1.CALORIES,USERS1.TYPE FROM USERS1,DISH) AS USDISH LEFT JOIN (SELECT USER_ALLERGENS.USER_ID,DISH_ALLERGENS.DISH_ID,ALLERGENS.NAME FROM USER_ALLERGENS,DISH_ALLERGENS,ALLERGENS WHERE ALLERGENS.ID=DISH_ALLERGENS.ALLERGEN_ID AND ALLERGENS.ID=USER_ALLERGENS.ALLERGEN_ID) AS ALLER ON USDISH.USER_ID = ALLER.USER_ID AND USDISH.DISH_ID = ALLER.DISH_ID) AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = %s AND MENU.MEAL_TIME='Lunch' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE AND MENU.DISH_ID = USALL.DISH_ID AND CALORIE_FORMULAE.CALORIES = USALL.CALORIES AND CALORIE_FORMULAE.DIET_GOAL_MEAL_PLAN_ID=USALL.DIET_GOAL_MEAL_PLAN_ID AND CALORIE_FORMULAE.NUM_BFST=USALL.BREAKFAST AND CALORIE_FORMULAE.NUM_LUNCH=USALL.LUNCH AND CALORIE_FORMULAE.NUM_SNACKS=USALL.SNACKS AND CALORIE_FORMULAE.NUM_DINNER=USALL.DINNER GROUP BY USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_LUNCH)(SELECT * FROM BREAKFAST1) UNION ALL (SELECT * FROM LUNCH1);",[d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,d,d,d,menu_date,d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,d,d,d,menu_date])
			else:
				cursor.execute("WITH T1 AS ("+
					"WITH BREAKFAST1 AS "
				+"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
				"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
				"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
				"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
				"SELECT DISTINCT B1.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID,USER_PROFILE.CALORIES,USER_PROFILE.BREAKFAST,USER_PROFILE.LUNCH,USER_PROFILE.SNACKS,USER_PROFILE.DINNER,G.TEMP_ID FROM (SELECT USER_FOOD_PREF.USER_ID,USER_FOOD_PREF.TYPE,ROW_NUMBER() OVER(PARTITION BY USER_FOOD_PREF.USER_ID ORDER BY USER_FOOD_PREF.ID DESC) AS RN FROM USER_FOOD_PREF,USER_PROFILE,DAY WHERE USER_PROFILE.ID=USER_FOOD_PREF.USER_ID AND USER_FOOD_PREF.MEAL_TIME='Breakfast' AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 ORDER BY USER_FOOD_PREF.ID DESC) AS B1,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Morning') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI,(SELECT X1.ID,g.i AS TEMP_ID FROM (SELECT * FROM USER_PROFILE,HOLI,(SELECT SKIP_MOR.USER_ID AS UI,SKIP_MOR.SKIPPER AS SKIP1,SKIP_EVE.SKIPPER AS SKIP2 FROM SKIP_MOR,SKIP_EVE WHERE SKIP_MOR.USER_ID=SKIP_EVE.USER_ID) AS X2 WHERE USER_PROFILE.ID=HOLI.USER_ID AND USER_PROFILE.ID=X2.UI) AS X1 cross join lateral generate_series(1,LEAST(BREAKFAST,(MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP1*(BREAKFAST+LUNCH))+(SKIP2*(SNACKS+DINNER))))) as g(i)) AS G WHERE STATUS='Active' AND (MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0) AND USER_PROFILE.ID = A.USER_ID AND B1.USER_ID=USER_PROFILE.ID AND G.TEMP_ID=B1.RN AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID  AND "+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s AND USER_PROFILE.ID=G.ID)"+
				"SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,USERS.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = %s AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,MEAL_PREF_CHANGE.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast' AND MEAL_PREF_CHANGE.DATE = %s)"+
				"SELECT USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_BFST AS CATEGORY,string_agg( DISTINCT USALL.ALLERGEN_NAME,', ') AS ALLERGEN FROM MENU,(SELECT USDISH.DISH_ID,USDISH.NAME AS DISH_NAME,USDISH.USER_ID,ALLER.NAME AS ALLERGEN_NAME,USDISH.FIRST_NAME,USDISH.LAST_NAME,USDISH.DIET_GOAL_MEAL_PLAN_ID,USDISH.CALORIES,USDISH.TYPE,USDISH.BREAKFAST,USDISH.LUNCH,USDISH.SNACKS,USDISH.DINNER FROM (SELECT USERS1.BREAKFAST,USERS1.LUNCH,USERS1.SNACKS,USERS1.DINNER,DISH.ID AS DISH_ID,USERS1.ID AS USER_ID,DISH.NAME,USERS1.FIRST_NAME,USERS1.LAST_NAME,USERS1.DIET_GOAL_MEAL_PLAN_ID,USERS1.CALORIES,USERS1.TYPE FROM USERS1,DISH) AS USDISH LEFT JOIN (SELECT USER_ALLERGENS.USER_ID,DISH_ALLERGENS.DISH_ID,ALLERGENS.NAME FROM USER_ALLERGENS,DISH_ALLERGENS,ALLERGENS WHERE ALLERGENS.ID=DISH_ALLERGENS.ALLERGEN_ID AND ALLERGENS.ID=USER_ALLERGENS.ALLERGEN_ID ORDER BY ALLERGENS.NAME ASC) AS ALLER ON USDISH.USER_ID = ALLER.USER_ID AND USDISH.DISH_ID = ALLER.DISH_ID) AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = %s AND MENU.MEAL_TIME='Breakfast' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE AND MENU.DISH_ID = USALL.DISH_ID AND CALORIE_FORMULAE.CALORIES = USALL.CALORIES AND CALORIE_FORMULAE.DIET_GOAL_MEAL_PLAN_ID=USALL.DIET_GOAL_MEAL_PLAN_ID AND CALORIE_FORMULAE.NUM_BFST=USALL.BREAKFAST AND CALORIE_FORMULAE.NUM_LUNCH=USALL.LUNCH AND CALORIE_FORMULAE.NUM_SNACKS=USALL.SNACKS AND CALORIE_FORMULAE.NUM_DINNER=USALL.DINNER GROUP BY USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_BFST),"+
					"LUNCH1 AS "+
					"(WITH USERS1 AS "+
					"(WITH USERS AS"+
					"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
					"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
					"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
					"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
					"SELECT DISTINCT B1.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID,USER_PROFILE.CALORIES,USER_PROFILE.BREAKFAST,USER_PROFILE.LUNCH,USER_PROFILE.SNACKS,USER_PROFILE.DINNER,G.TEMP_ID FROM (SELECT USER_FOOD_PREF.USER_ID,USER_FOOD_PREF.TYPE,ROW_NUMBER() OVER(PARTITION BY USER_FOOD_PREF.USER_ID ORDER BY USER_FOOD_PREF.ID DESC) AS RN FROM USER_FOOD_PREF,USER_PROFILE,DAY WHERE USER_PROFILE.ID=USER_FOOD_PREF.USER_ID AND USER_FOOD_PREF.MEAL_TIME='Lunch' AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 ORDER BY USER_FOOD_PREF.ID DESC) AS B1,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Morning') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI,(SELECT X1.ID,g.i AS TEMP_ID FROM (SELECT * FROM USER_PROFILE,HOLI,(SELECT SKIP_MOR.USER_ID AS UI,SKIP_MOR.SKIPPER AS SKIP1,SKIP_EVE.SKIPPER AS SKIP2 FROM SKIP_MOR,SKIP_EVE WHERE SKIP_MOR.USER_ID=SKIP_EVE.USER_ID) AS X2 WHERE USER_PROFILE.ID=HOLI.USER_ID AND USER_PROFILE.ID=X2.UI) AS X1 cross join lateral generate_series(1,LEAST(LUNCH,(MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP1*(BREAKFAST+LUNCH))+(SKIP2*(SNACKS+DINNER))))) as g(i)) AS G WHERE STATUS='Active' AND MEAL_TOKENS-BREAKFAST-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND LUNCH=1 AND USER_PROFILE.ID = A.USER_ID AND B1.USER_ID=USER_PROFILE.ID AND G.TEMP_ID=B1.RN AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND "+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s AND USER_PROFILE.ID=G.ID)"+
					"SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,USERS.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = %s AND MEAL_PREF_CHANGE.MEAL_TIME='Lunch') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,MEAL_PREF_CHANGE.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Lunch' AND MEAL_PREF_CHANGE.DATE = %s)"+
					"SELECT USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_LUNCH AS CATEGORY,string_agg( DISTINCT USALL.ALLERGEN_NAME,', ') AS ALLERGEN FROM MENU,(SELECT USDISH.DISH_ID,USDISH.NAME AS DISH_NAME,USDISH.USER_ID,ALLER.NAME AS ALLERGEN_NAME,USDISH.FIRST_NAME,USDISH.LAST_NAME,USDISH.DIET_GOAL_MEAL_PLAN_ID,USDISH.CALORIES,USDISH.TYPE,USDISH.BREAKFAST,USDISH.LUNCH,USDISH.SNACKS,USDISH.DINNER FROM (SELECT USERS1.BREAKFAST,USERS1.LUNCH,USERS1.SNACKS,USERS1.DINNER,DISH.ID AS DISH_ID,USERS1.ID AS USER_ID,DISH.NAME,USERS1.FIRST_NAME,USERS1.LAST_NAME,USERS1.DIET_GOAL_MEAL_PLAN_ID,USERS1.CALORIES,USERS1.TYPE FROM USERS1,DISH) AS USDISH LEFT JOIN (SELECT USER_ALLERGENS.USER_ID,DISH_ALLERGENS.DISH_ID,ALLERGENS.NAME FROM USER_ALLERGENS,DISH_ALLERGENS,ALLERGENS WHERE ALLERGENS.ID=DISH_ALLERGENS.ALLERGEN_ID AND ALLERGENS.ID=USER_ALLERGENS.ALLERGEN_ID ORDER BY ALLERGENS.NAME ASC) AS ALLER ON USDISH.USER_ID = ALLER.USER_ID AND USDISH.DISH_ID = ALLER.DISH_ID) AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = %s AND MENU.MEAL_TIME='Lunch' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE AND MENU.DISH_ID = USALL.DISH_ID AND CALORIE_FORMULAE.CALORIES = USALL.CALORIES AND CALORIE_FORMULAE.DIET_GOAL_MEAL_PLAN_ID=USALL.DIET_GOAL_MEAL_PLAN_ID AND CALORIE_FORMULAE.NUM_BFST=USALL.BREAKFAST AND CALORIE_FORMULAE.NUM_LUNCH=USALL.LUNCH AND CALORIE_FORMULAE.NUM_SNACKS=USALL.SNACKS AND CALORIE_FORMULAE.NUM_DINNER=USALL.DINNER GROUP BY USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_LUNCH)(SELECT * FROM BREAKFAST1) UNION ALL (SELECT * FROM LUNCH1)) SELECT X1.DISH_NAME,X1.CAT_1,X1.CAT_2,X1.CAT_3,X1.CAT_4,X1.CAT_5,X1.TOTAL,X2.ALLERG FROM ("+
					" SELECT DISH_NAME,(SUM(CASE WHEN CATEGORY=1 THEN NUMBER_OF_DISHES ELSE 0 END )) AS CAT_1 ,(SUM(CASE WHEN CATEGORY=2 THEN NUMBER_OF_DISHES ELSE 0 END )) AS CAT_2 ,(SUM(CASE WHEN CATEGORY=3 THEN NUMBER_OF_DISHES ELSE 0 END )) AS CAT_3,(SUM(CASE WHEN CATEGORY=4 THEN NUMBER_OF_DISHES ELSE 0 END )) AS CAT_4,(SUM(CASE WHEN CATEGORY=5 THEN NUMBER_OF_DISHES ELSE 0 END )) AS CAT_5,(SUM(CASE WHEN CATEGORY=1 THEN NUMBER_OF_DISHES WHEN CATEGORY=2 THEN NUMBER_OF_DISHES WHEN CATEGORY=3 THEN NUMBER_OF_DISHES WHEN CATEGORY=4 THEN NUMBER_OF_DISHES WHEN CATEGORY=5 THEN NUMBER_OF_DISHES ELSE 0 END )) AS TOTAL FROM (SELECT DISH_NAME,COUNT(*) AS NUMBER_OF_DISHES,CATEGORY FROM (SELECT DISTINCT DISH_NAME,CATEGORY FROM T1) AS T3 GROUP BY DISH_NAME,CATEGORY) AS T2 GROUP BY DISH_NAME) AS X1,(SELECT DISH_NAME,STRING_AGG(ALLERG,' , ') AS ALLERG FROM (SELECT DISH_NAME,ALLERGEN || ' : ' || COUNT(ALLERGEN)::TEXT AS ALLERG FROM T1 GROUP BY DISH_NAME,ALLERGEN) AS X3 GROUP BY DISH_NAME) AS X2 WHERE X2.DISH_NAME=X1.DISH_NAME ;",[d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,d,d,d,menu_date,d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,d,d,d,menu_date])
		elif ti=='Evening':
			now = datetime.datetime.now()
			today11am = now.replace(hour=11, minute=0, second=0, microsecond=0)
			s=1
			st=0
			if t=='detailed':
				cursor.execute("WITH SNACKS1 AS "+
				"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
				"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
				"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
				"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
				"SELECT DISTINCT B1.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID,USER_PROFILE.CALORIES,USER_PROFILE.BREAKFAST,USER_PROFILE.LUNCH,USER_PROFILE.SNACKS,USER_PROFILE.DINNER,G.TEMP_ID FROM (SELECT USER_FOOD_PREF.USER_ID,USER_FOOD_PREF.TYPE,ROW_NUMBER() OVER(PARTITION BY USER_FOOD_PREF.USER_ID ORDER BY USER_FOOD_PREF.ID DESC) AS RN FROM USER_FOOD_PREF,USER_PROFILE,DAY WHERE USER_PROFILE.ID=USER_FOOD_PREF.USER_ID AND USER_FOOD_PREF.MEAL_TIME='Snacks' AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 ORDER BY USER_FOOD_PREF.ID DESC) AS B1,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Evening') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI,(SELECT X1.ID,g.i AS TEMP_ID FROM (SELECT * FROM USER_PROFILE,HOLI,(SELECT SKIP_MOR.USER_ID AS UI,SKIP_MOR.SKIPPER AS SKIP1,SKIP_EVE.SKIPPER AS SKIP2 FROM SKIP_MOR,SKIP_EVE WHERE SKIP_MOR.USER_ID=SKIP_EVE.USER_ID) AS X2 WHERE USER_PROFILE.ID=HOLI.USER_ID AND USER_PROFILE.ID=X2.UI) AS X1 cross join lateral generate_series(1,LEAST(SNACKS,(MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))-(BREAKFAST+LUNCH)*%s-(SNACKS+DINNER)*%s+(SKIP1*(BREAKFAST+LUNCH))+(SKIP2*(SNACKS+DINNER))))) as g(i)) AS G WHERE STATUS='Active' AND MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))-(BREAKFAST+LUNCH)*%s-(SNACKS+DINNER)*%s+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND USER_PROFILE.ID = A.USER_ID AND B1.USER_ID=USER_PROFILE.ID AND G.TEMP_ID=B1.RN AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND "+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s AND USER_PROFILE.ID=G.ID)"+
				"SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,USERS.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = %s AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,MEAL_PREF_CHANGE.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks' AND MEAL_PREF_CHANGE.DATE = %s)"+
				"SELECT USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_SNACKS AS CATEGORY,string_agg( DISTINCT USALL.ALLERGEN_NAME,', ') AS ALLERGEN FROM MENU,(SELECT USDISH.DISH_ID,USDISH.NAME AS DISH_NAME,USDISH.USER_ID,ALLER.NAME AS ALLERGEN_NAME,USDISH.FIRST_NAME,USDISH.LAST_NAME,USDISH.DIET_GOAL_MEAL_PLAN_ID,USDISH.CALORIES,USDISH.TYPE,USDISH.BREAKFAST,USDISH.LUNCH,USDISH.SNACKS,USDISH.DINNER FROM (SELECT USERS1.BREAKFAST,USERS1.LUNCH,USERS1.SNACKS,USERS1.DINNER,DISH.ID AS DISH_ID,USERS1.ID AS USER_ID,DISH.NAME,USERS1.FIRST_NAME,USERS1.LAST_NAME,USERS1.DIET_GOAL_MEAL_PLAN_ID,USERS1.CALORIES,USERS1.TYPE FROM USERS1,DISH) AS USDISH LEFT JOIN (SELECT USER_ALLERGENS.USER_ID,DISH_ALLERGENS.DISH_ID,ALLERGENS.NAME FROM USER_ALLERGENS,DISH_ALLERGENS,ALLERGENS WHERE ALLERGENS.ID=DISH_ALLERGENS.ALLERGEN_ID AND ALLERGENS.ID=USER_ALLERGENS.ALLERGEN_ID) AS ALLER ON USDISH.USER_ID = ALLER.USER_ID AND USDISH.DISH_ID = ALLER.DISH_ID) AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = %s AND MENU.MEAL_TIME='Snacks' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE AND MENU.DISH_ID = USALL.DISH_ID AND CALORIE_FORMULAE.CALORIES = USALL.CALORIES AND CALORIE_FORMULAE.DIET_GOAL_MEAL_PLAN_ID=USALL.DIET_GOAL_MEAL_PLAN_ID AND CALORIE_FORMULAE.NUM_BFST=USALL.BREAKFAST AND CALORIE_FORMULAE.NUM_LUNCH=USALL.LUNCH AND CALORIE_FORMULAE.NUM_SNACKS=USALL.SNACKS AND CALORIE_FORMULAE.NUM_DINNER=USALL.DINNER GROUP BY USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_SNACKS),"+
				"DINNER AS "+
				"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
				"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
				"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
				"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
				"SELECT DISTINCT B1.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID,USER_PROFILE.CALORIES,USER_PROFILE.BREAKFAST,USER_PROFILE.LUNCH,USER_PROFILE.SNACKS,USER_PROFILE.DINNER,G.TEMP_ID FROM (SELECT USER_FOOD_PREF.USER_ID,USER_FOOD_PREF.TYPE,ROW_NUMBER() OVER(PARTITION BY USER_FOOD_PREF.USER_ID ORDER BY USER_FOOD_PREF.ID DESC) AS RN FROM USER_FOOD_PREF,USER_PROFILE,DAY WHERE USER_PROFILE.ID=USER_FOOD_PREF.USER_ID AND USER_FOOD_PREF.MEAL_TIME='Dinner' AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 ORDER BY USER_FOOD_PREF.ID DESC) AS B1,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Evening') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI,(SELECT X1.ID,g.i AS TEMP_ID FROM (SELECT * FROM USER_PROFILE,HOLI,(SELECT SKIP_MOR.USER_ID AS UI,SKIP_MOR.SKIPPER AS SKIP1,SKIP_EVE.SKIPPER AS SKIP2 FROM SKIP_MOR,SKIP_EVE WHERE SKIP_MOR.USER_ID=SKIP_EVE.USER_ID) AS X2 WHERE USER_PROFILE.ID=HOLI.USER_ID AND USER_PROFILE.ID=X2.UI) AS X1 cross join lateral generate_series(1,LEAST(DINNER,(MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))-(BREAKFAST+LUNCH)*%s-(SNACKS+DINNER)*%s+(SKIP1*(BREAKFAST+LUNCH))+(SKIP2*(SNACKS+DINNER))))) as g(i)) AS G  WHERE STATUS='Active' AND MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))-(BREAKFAST+LUNCH)*%s-(DINNER)*%s-SNACKS+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND DINNER=1 AND USER_PROFILE.ID = A.USER_ID AND B1.USER_ID=USER_PROFILE.ID AND G.TEMP_ID=B1.RN AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND "+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s AND USER_PROFILE.ID=G.ID)"+
				"SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,USERS.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = %s AND MEAL_PREF_CHANGE.MEAL_TIME='Dinner') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,MEAL_PREF_CHANGE.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Dinner' AND MEAL_PREF_CHANGE.DATE = %s)"+
				"SELECT USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_DINNER AS CATEGORY,string_agg( DISTINCT USALL.ALLERGEN_NAME,', ') AS ALLERGEN FROM MENU,(SELECT USDISH.DISH_ID,USDISH.NAME AS DISH_NAME,USDISH.USER_ID,ALLER.NAME AS ALLERGEN_NAME,USDISH.FIRST_NAME,USDISH.LAST_NAME,USDISH.DIET_GOAL_MEAL_PLAN_ID,USDISH.CALORIES,USDISH.TYPE,USDISH.BREAKFAST,USDISH.LUNCH,USDISH.SNACKS,USDISH.DINNER FROM (SELECT USERS1.BREAKFAST,USERS1.LUNCH,USERS1.SNACKS,USERS1.DINNER,DISH.ID AS DISH_ID,USERS1.ID AS USER_ID,DISH.NAME,USERS1.FIRST_NAME,USERS1.LAST_NAME,USERS1.DIET_GOAL_MEAL_PLAN_ID,USERS1.CALORIES,USERS1.TYPE FROM USERS1,DISH) AS USDISH LEFT JOIN (SELECT USER_ALLERGENS.USER_ID,DISH_ALLERGENS.DISH_ID,ALLERGENS.NAME FROM USER_ALLERGENS,DISH_ALLERGENS,ALLERGENS WHERE ALLERGENS.ID=DISH_ALLERGENS.ALLERGEN_ID AND ALLERGENS.ID=USER_ALLERGENS.ALLERGEN_ID) AS ALLER ON USDISH.USER_ID = ALLER.USER_ID AND USDISH.DISH_ID = ALLER.DISH_ID) AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = %s AND MENU.MEAL_TIME='Dinner' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE AND MENU.DISH_ID = USALL.DISH_ID AND CALORIE_FORMULAE.CALORIES = USALL.CALORIES AND CALORIE_FORMULAE.DIET_GOAL_MEAL_PLAN_ID=USALL.DIET_GOAL_MEAL_PLAN_ID AND CALORIE_FORMULAE.NUM_BFST=USALL.BREAKFAST AND CALORIE_FORMULAE.NUM_LUNCH=USALL.LUNCH AND CALORIE_FORMULAE.NUM_SNACKS=USALL.SNACKS AND CALORIE_FORMULAE.NUM_DINNER=USALL.DINNER GROUP BY USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_DINNER)(SELECT * FROM SNACKS1) UNION ALL(SELECT * FROM DINNER);",[d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,s,st,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,s,st,d,d,d,menu_date,d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,s,st,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,s,st,d,d,d,menu_date])
			else:
				cursor.execute("WITH T1 AS("
					+"WITH SNACKS1 AS "+
				"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
				"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
				"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
				"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
				"SELECT DISTINCT B1.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID,USER_PROFILE.CALORIES,USER_PROFILE.BREAKFAST,USER_PROFILE.LUNCH,USER_PROFILE.SNACKS,USER_PROFILE.DINNER,G.TEMP_ID FROM (SELECT USER_FOOD_PREF.USER_ID,USER_FOOD_PREF.TYPE,ROW_NUMBER() OVER(PARTITION BY USER_FOOD_PREF.USER_ID ORDER BY USER_FOOD_PREF.ID DESC) AS RN FROM USER_FOOD_PREF,USER_PROFILE,DAY WHERE USER_PROFILE.ID=USER_FOOD_PREF.USER_ID AND USER_FOOD_PREF.MEAL_TIME='Snacks' AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 ORDER BY USER_FOOD_PREF.ID DESC) AS B1,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Evening') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI,(SELECT X1.ID,g.i AS TEMP_ID FROM (SELECT * FROM USER_PROFILE,HOLI,(SELECT SKIP_MOR.USER_ID AS UI,SKIP_MOR.SKIPPER AS SKIP1,SKIP_EVE.SKIPPER AS SKIP2 FROM SKIP_MOR,SKIP_EVE WHERE SKIP_MOR.USER_ID=SKIP_EVE.USER_ID) AS X2 WHERE USER_PROFILE.ID=HOLI.USER_ID AND USER_PROFILE.ID=X2.UI) AS X1 cross join lateral generate_series(1,LEAST(DINNER,(MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))-(BREAKFAST+LUNCH)*%s-(SNACKS+DINNER)*%s+(SKIP1*(BREAKFAST+LUNCH))+(SKIP2*(SNACKS+DINNER))))) as g(i)) AS G WHERE STATUS='Active' AND MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))-(BREAKFAST+LUNCH)*%s-(SNACKS+DINNER)*%s+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND USER_PROFILE.ID = A.USER_ID AND B1.USER_ID=USER_PROFILE.ID AND G.TEMP_ID=B1.RN AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND "+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s AND USER_PROFILE.ID=G.ID)"+
				"SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,USERS.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = %s AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,MEAL_PREF_CHANGE.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks' AND MEAL_PREF_CHANGE.DATE = %s)"+
				"SELECT USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_SNACKS AS CATEGORY,string_agg( DISTINCT USALL.ALLERGEN_NAME,', ') AS ALLERGEN FROM MENU,(SELECT USDISH.DISH_ID,USDISH.NAME AS DISH_NAME,USDISH.USER_ID,ALLER.NAME AS ALLERGEN_NAME,USDISH.FIRST_NAME,USDISH.LAST_NAME,USDISH.DIET_GOAL_MEAL_PLAN_ID,USDISH.CALORIES,USDISH.TYPE,USDISH.BREAKFAST,USDISH.LUNCH,USDISH.SNACKS,USDISH.DINNER FROM (SELECT USERS1.BREAKFAST,USERS1.LUNCH,USERS1.SNACKS,USERS1.DINNER,DISH.ID AS DISH_ID,USERS1.ID AS USER_ID,DISH.NAME,USERS1.FIRST_NAME,USERS1.LAST_NAME,USERS1.DIET_GOAL_MEAL_PLAN_ID,USERS1.CALORIES,USERS1.TYPE FROM USERS1,DISH) AS USDISH LEFT JOIN (SELECT USER_ALLERGENS.USER_ID,DISH_ALLERGENS.DISH_ID,ALLERGENS.NAME FROM USER_ALLERGENS,DISH_ALLERGENS,ALLERGENS WHERE ALLERGENS.ID=DISH_ALLERGENS.ALLERGEN_ID AND ALLERGENS.ID=USER_ALLERGENS.ALLERGEN_ID ORDER BY ALLERGENS.NAME ASC) AS ALLER ON USDISH.USER_ID = ALLER.USER_ID AND USDISH.DISH_ID = ALLER.DISH_ID) AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = %s AND MENU.MEAL_TIME='Snacks' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE AND MENU.DISH_ID = USALL.DISH_ID AND CALORIE_FORMULAE.CALORIES = USALL.CALORIES AND CALORIE_FORMULAE.DIET_GOAL_MEAL_PLAN_ID=USALL.DIET_GOAL_MEAL_PLAN_ID AND CALORIE_FORMULAE.NUM_BFST=USALL.BREAKFAST AND CALORIE_FORMULAE.NUM_LUNCH=USALL.LUNCH AND CALORIE_FORMULAE.NUM_SNACKS=USALL.SNACKS AND CALORIE_FORMULAE.NUM_DINNER=USALL.DINNER GROUP BY USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_SNACKS),"+
				"DINNER AS "+
				"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
				"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
				"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
				"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
				"SELECT DISTINCT B1.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID,USER_PROFILE.CALORIES,USER_PROFILE.BREAKFAST,USER_PROFILE.LUNCH,USER_PROFILE.SNACKS,USER_PROFILE.DINNER,G.TEMP_ID FROM (SELECT USER_FOOD_PREF.USER_ID,USER_FOOD_PREF.TYPE,ROW_NUMBER() OVER(PARTITION BY USER_FOOD_PREF.USER_ID ORDER BY USER_FOOD_PREF.ID DESC) AS RN FROM USER_FOOD_PREF,USER_PROFILE,DAY WHERE USER_PROFILE.ID=USER_FOOD_PREF.USER_ID AND USER_FOOD_PREF.MEAL_TIME='Dinner' AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 ORDER BY USER_FOOD_PREF.ID DESC) AS B1,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Evening') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI,(SELECT X1.ID,g.i AS TEMP_ID FROM (SELECT * FROM USER_PROFILE,HOLI,(SELECT SKIP_MOR.USER_ID AS UI,SKIP_MOR.SKIPPER AS SKIP1,SKIP_EVE.SKIPPER AS SKIP2 FROM SKIP_MOR,SKIP_EVE WHERE SKIP_MOR.USER_ID=SKIP_EVE.USER_ID) AS X2 WHERE USER_PROFILE.ID=HOLI.USER_ID AND USER_PROFILE.ID=X2.UI) AS X1 cross join lateral generate_series(1,LEAST(SNACKS,(MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))-(BREAKFAST+LUNCH)*%s-(SNACKS+DINNER)*%s+(SKIP1*(BREAKFAST+LUNCH))+(SKIP2*(SNACKS+DINNER))))) as g(i)) AS G  WHERE STATUS='Active' AND MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))-(BREAKFAST+LUNCH)*%s-(DINNER)*%s-SNACKS+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND DINNER=1 AND USER_PROFILE.ID = A.USER_ID AND B1.USER_ID=USER_PROFILE.ID AND G.TEMP_ID=B1.RN AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND "+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s AND USER_PROFILE.ID=G.ID)"+
				"SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,USERS.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = %s AND MEAL_PREF_CHANGE.MEAL_TIME='Dinner') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.CALORIES,MEAL_PREF_CHANGE.TYPE,USERS.BREAKFAST,USERS.LUNCH,USERS.SNACKS,USERS.DINNER FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Dinner' AND MEAL_PREF_CHANGE.DATE = %s)"+
				"SELECT USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_DINNER AS CATEGORY,string_agg( DISTINCT USALL.ALLERGEN_NAME,', ') AS ALLERGEN FROM MENU,(SELECT USDISH.DISH_ID,USDISH.NAME AS DISH_NAME,USDISH.USER_ID,ALLER.NAME AS ALLERGEN_NAME,USDISH.FIRST_NAME,USDISH.LAST_NAME,USDISH.DIET_GOAL_MEAL_PLAN_ID,USDISH.CALORIES,USDISH.TYPE,USDISH.BREAKFAST,USDISH.LUNCH,USDISH.SNACKS,USDISH.DINNER FROM (SELECT USERS1.BREAKFAST,USERS1.LUNCH,USERS1.SNACKS,USERS1.DINNER,DISH.ID AS DISH_ID,USERS1.ID AS USER_ID,DISH.NAME,USERS1.FIRST_NAME,USERS1.LAST_NAME,USERS1.DIET_GOAL_MEAL_PLAN_ID,USERS1.CALORIES,USERS1.TYPE FROM USERS1,DISH) AS USDISH LEFT JOIN (SELECT USER_ALLERGENS.USER_ID,DISH_ALLERGENS.DISH_ID,ALLERGENS.NAME FROM USER_ALLERGENS,DISH_ALLERGENS,ALLERGENS WHERE ALLERGENS.ID=DISH_ALLERGENS.ALLERGEN_ID AND ALLERGENS.ID=USER_ALLERGENS.ALLERGEN_ID ORDER BY ALLERGENS.NAME ASC) AS ALLER ON USDISH.USER_ID = ALLER.USER_ID AND USDISH.DISH_ID = ALLER.DISH_ID) AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = %s AND MENU.MEAL_TIME='Dinner' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE AND MENU.DISH_ID = USALL.DISH_ID AND CALORIE_FORMULAE.CALORIES = USALL.CALORIES AND CALORIE_FORMULAE.DIET_GOAL_MEAL_PLAN_ID=USALL.DIET_GOAL_MEAL_PLAN_ID AND CALORIE_FORMULAE.NUM_BFST=USALL.BREAKFAST AND CALORIE_FORMULAE.NUM_LUNCH=USALL.LUNCH AND CALORIE_FORMULAE.NUM_SNACKS=USALL.SNACKS AND CALORIE_FORMULAE.NUM_DINNER=USALL.DINNER GROUP BY USALL.USER_ID,USALL.FIRST_NAME,USALL.LAST_NAME,USALL.DISH_NAME,CALORIE_FORMULAE.CODE_DINNER)(SELECT * FROM SNACKS1) UNION ALL(SELECT * FROM DINNER))SELECT X1.DISH_NAME,X1.CAT_1,X1.CAT_2,X1.CAT_3,X1.CAT_4,X1.CAT_5,X1.TOTAL,X2.ALLERG FROM ("+
					" SELECT DISH_NAME,(SUM(CASE WHEN CATEGORY=1 THEN NUMBER_OF_DISHES ELSE 0 END )) AS CAT_1 ,(SUM(CASE WHEN CATEGORY=2 THEN NUMBER_OF_DISHES ELSE 0 END )) AS CAT_2 ,(SUM(CASE WHEN CATEGORY=3 THEN NUMBER_OF_DISHES ELSE 0 END )) AS CAT_3,(SUM(CASE WHEN CATEGORY=4 THEN NUMBER_OF_DISHES ELSE 0 END )) AS CAT_4,(SUM(CASE WHEN CATEGORY=5 THEN NUMBER_OF_DISHES ELSE 0 END )) AS CAT_5,(SUM(CASE WHEN CATEGORY=1 THEN NUMBER_OF_DISHES WHEN CATEGORY=2 THEN NUMBER_OF_DISHES WHEN CATEGORY=3 THEN NUMBER_OF_DISHES WHEN CATEGORY=4 THEN NUMBER_OF_DISHES WHEN CATEGORY=5 THEN NUMBER_OF_DISHES ELSE 0 END )) AS TOTAL FROM (SELECT DISH_NAME,COUNT(*) AS NUMBER_OF_DISHES,CATEGORY FROM (SELECT DISTINCT DISH_NAME,CATEGORY FROM T1) AS T3 GROUP BY DISH_NAME,CATEGORY) AS T2 GROUP BY DISH_NAME) AS X1,(SELECT DISH_NAME,STRING_AGG(ALLERG,' , ') AS ALLERG FROM (SELECT DISH_NAME,ALLERGEN || ' : ' || COUNT(ALLERGEN)::TEXT AS ALLERG FROM T1 GROUP BY DISH_NAME,ALLERGEN) AS X3 GROUP BY DISH_NAME) AS X2 WHERE X2.DISH_NAME=X1.DISH_NAME ;",[d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,s,st,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,s,st,d,d,d,menu_date,d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,s,st,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,s,st,d,d,d,menu_date])
		if cursor.rowcount >0:
			row = cursor.fetchall()
		else:
			row = []
	return row

def my_custom_sql_address(d,ti):
	with connection.cursor() as cursor:
		start_date = date.today()
		if start_date.weekday()==6:
			start_date+=datetime.timedelta(1)
		end_date = d
		w=count_weekday(start_date,end_date)
		start_week_days = min(start_date.weekday(), 5) + 1
		end_week_days = min(end_date.weekday(), 5) + 1
		no_of_weeks = end_date.isocalendar()[1] - start_date.isocalendar()[1]
		working_days = (6 * no_of_weeks) + end_week_days - start_week_days
		if start_date.weekday() < 6:
			working_days += 1
		weekday = ['MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY','SUNDAY']
		x=working_days
		sun = w['Sun']
		if d.weekday()<5:
			if ti=='Morning':
				cursor.execute("WITH MEAL AS "+
					"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
					"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
					"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
					"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
					"SELECT USER_PROFILE.ID AS USER_ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.PHONE,USER_PROFILE.DEFAULT_ADDRESS_"+weekday[d.weekday()]+"_1 AS ADDRESS,USER_PROFILE.KITCHEN_ID_"+weekday[d.weekday()]+"_1 AS KITCHEN_ID,USER_PROFILE.INSTRUCTIONS_"+weekday[d.weekday()]+"_1 AS INSTRUCTIONS FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Morning') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI WHERE STATUS='Active' AND MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND (USER_FOOD_PREF.MEAL_TIME='Breakfast' OR USER_FOOD_PREF.MEAL_TIME='Lunch') AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND USER_PROFILE."+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s)"+
					"(SELECT * FROM MEAL WHERE USER_ID NOT IN (SELECT USER_ID FROM DELIVERY_ADDRESS WHERE TIME_OF_DELIVERY = 'Morning' AND DATE= %s)) UNION (SELECT MEAL.USER_ID,MEAL.FIRST_NAME,MEAL.LAST_NAME,MEAL.PHONE,DELIVERY_ADDRESS.ADDRESS,DELIVERY_ZONES.KITCHEN_ID,DELIVERY_ADDRESS.INSTRUCTIONS FROM MEAL,DELIVERY_ADDRESS,DELIVERY_ZONES WHERE TIME_OF_DELIVERY = 'Morning' AND DATE= %s AND MEAL.USER_ID = DELIVERY_ADDRESS.USER_ID AND DELIVERY_ADDRESS.KITCHEN_ID = DELIVERY_ZONES.ID);",[d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,d,d,d])
			elif ti=='Evening':
				cursor.execute("WITH MEAL AS "+
					"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
					"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
					"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
					"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
					"SELECT USER_PROFILE.ID AS USER_ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.PHONE,USER_PROFILE.DEFAULT_ADDRESS_"+weekday[d.weekday()]+"_2 AS ADDRESS,USER_PROFILE.KITCHEN_ID_"+weekday[d.weekday()]+"_2 AS KITCHEN_ID,USER_PROFILE.INSTRUCTIONS_"+weekday[d.weekday()]+"_2 AS INSTRUCTIONS FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Evening') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI WHERE STATUS='Active' AND MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))-BREAKFAST-LUNCH+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND (USER_FOOD_PREF.MEAL_TIME='Lunch' OR USER_FOOD_PREF.MEAL_TIME='Dinner') AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND USER_PROFILE."+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s)"+
					"(SELECT * FROM MEAL WHERE USER_ID NOT IN (SELECT USER_ID FROM DELIVERY_ADDRESS WHERE TIME_OF_DELIVERY = 'Evening' AND DATE= %s)) UNION (SELECT MEAL.USER_ID,MEAL.FIRST_NAME,MEAL.LAST_NAME,MEAL.PHONE,DELIVERY_ADDRESS.ADDRESS,DELIVERY_ZONES.KITCHEN_ID,DELIVERY_ADDRESS.INSTRUCTIONS FROM MEAL,DELIVERY_ADDRESS,DELIVERY_ZONES WHERE TIME_OF_DELIVERY = 'Evening' AND DATE= %s AND MEAL.USER_ID = DELIVERY_ADDRESS.USER_ID AND DELIVERY_ADDRESS.KITCHEN_ID = DELIVERY_ZONES.ID);",[d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,d,d,d])
		else:
			if ti=='Morning':
				cursor.execute("WITH T1 AS (WITH MEAL AS "+
					"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
					"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
					"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
					"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
					"SELECT USER_PROFILE.ID AS USER_ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.PHONE,USER_PROFILE.DEFAULT_ADDRESS_"+weekday[d.weekday()]+"_1 AS ADDRESS,USER_PROFILE.KITCHEN_ID_"+weekday[d.weekday()]+"_1 AS KITCHEN_ID,USER_PROFILE.INSTRUCTIONS_"+weekday[d.weekday()]+"_1 AS INSTRUCTIONS FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Morning') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI WHERE STATUS='Active' AND MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND (USER_FOOD_PREF.MEAL_TIME='Breakfast' OR USER_FOOD_PREF.MEAL_TIME='Lunch') AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND USER_PROFILE."+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s)"+
					"(SELECT * FROM MEAL WHERE USER_ID NOT IN (SELECT USER_ID FROM DELIVERY_ADDRESS WHERE TIME_OF_DELIVERY = 'Morning' AND DATE= %s)) UNION (SELECT MEAL.USER_ID,MEAL.FIRST_NAME,MEAL.LAST_NAME,MEAL.PHONE,DELIVERY_ADDRESS.ADDRESS,DELIVERY_ZONES.KITCHEN_ID,DELIVERY_ADDRESS.INSTRUCTIONS FROM MEAL,DELIVERY_ADDRESS,DELIVERY_ZONES WHERE TIME_OF_DELIVERY = 'Morning' AND DATE= %s AND MEAL.USER_ID = DELIVERY_ADDRESS.USER_ID AND DELIVERY_ADDRESS.KITCHEN_ID = DELIVERY_ZONES.ID)),"+
					"T2 AS ("+
					"WITH MEAL AS "+
					"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
					"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
					"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
					"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
					"SELECT USER_PROFILE.ID AS USER_ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.PHONE,USER_PROFILE.DEFAULT_ADDRESS_"+weekday[d.weekday()]+"_1 AS ADDRESS,USER_PROFILE.KITCHEN_ID_"+weekday[d.weekday()]+"_1 AS KITCHEN_ID,USER_PROFILE.INSTRUCTIONS_"+weekday[d.weekday()]+"_1 AS INSTRUCTIONS FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Morning') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI WHERE STATUS='Active' AND MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND (USER_FOOD_PREF.MEAL_TIME='Breakfast' OR USER_FOOD_PREF.MEAL_TIME='Lunch') AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND USER_PROFILE."+weekday[d.weekday()+1]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s)"+
					"(SELECT * FROM MEAL WHERE USER_ID NOT IN (SELECT USER_ID FROM DELIVERY_ADDRESS WHERE TIME_OF_DELIVERY = 'Morning' AND DATE= %s)) UNION (SELECT MEAL.USER_ID,MEAL.FIRST_NAME,MEAL.LAST_NAME,MEAL.PHONE,DELIVERY_ADDRESS.ADDRESS,DELIVERY_ZONES.KITCHEN_ID,DELIVERY_ADDRESS.INSTRUCTIONS FROM MEAL,DELIVERY_ADDRESS,DELIVERY_ZONES WHERE TIME_OF_DELIVERY = 'Morning' AND DATE= %s AND MEAL.USER_ID = DELIVERY_ADDRESS.USER_ID AND DELIVERY_ADDRESS.KITCHEN_ID = DELIVERY_ZONES.ID))"+
					"SELECT * FROM T1 UNION SELECT * FROM T2;",[d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,d,d,d,d,d+datetime.timedelta(days=1),d+datetime.timedelta(days=1),d+datetime.timedelta(days=1),d+datetime.timedelta(days=1),d+datetime.timedelta(days=1),d+datetime.timedelta(days=1),w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat']+1,sun,d+datetime.timedelta(days=1),d,d])
			elif ti=='Evening':
				cursor.execute("WITH T1 AS (WITH MEAL AS "+
					"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
					"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
					"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
					"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
					"SELECT USER_PROFILE.ID AS USER_ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.PHONE,USER_PROFILE.DEFAULT_ADDRESS_"+weekday[d.weekday()]+"_2 AS ADDRESS,USER_PROFILE.KITCHEN_ID_"+weekday[d.weekday()]+"_2 AS KITCHEN_ID,USER_PROFILE.INSTRUCTIONS_"+weekday[d.weekday()]+"_2 AS INSTRUCTIONS FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Evening') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI WHERE STATUS='Active' AND MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND (USER_FOOD_PREF.MEAL_TIME='Lunch' OR USER_FOOD_PREF.MEAL_TIME='Dinner') AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND USER_PROFILE."+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s)"+
					"(SELECT * FROM MEAL WHERE USER_ID NOT IN (SELECT USER_ID FROM DELIVERY_ADDRESS WHERE TIME_OF_DELIVERY = 'Evening' AND DATE= %s)) UNION (SELECT MEAL.USER_ID,MEAL.FIRST_NAME,MEAL.LAST_NAME,MEAL.PHONE,DELIVERY_ADDRESS.ADDRESS,DELIVERY_ZONES.KITCHEN_ID,DELIVERY_ADDRESS.INSTRUCTIONS FROM MEAL,DELIVERY_ADDRESS,DELIVERY_ZONES WHERE TIME_OF_DELIVERY = 'Evening' AND DATE= %s AND MEAL.USER_ID = DELIVERY_ADDRESS.USER_ID AND DELIVERY_ADDRESS.KITCHEN_ID = DELIVERY_ZONES.ID)), T2 AS (WITH MEAL AS "+
					"(WITH DAY AS (SELECT TO_CHAR(%s,'DAY') AS DATE),"+
					"SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Morning' GROUP BY USER_ID)),"+
					"SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT USER_ID,COUNT(*) AS SKIPPER FROM SKIP_MEAL WHERE SKIP_MEAL.DATE >= current_date AND SKIP_MEAL.DATE<=%s AND MEAL_TIME='Evening' GROUP BY USER_ID)),"+
					"HOLI AS (SELECT USER_PROFILE.ID AS USER_ID,MON_COUNT,TUE_COUNT,WED_COUNT,THU_COUNT,FRI_COUNT,SAT_COUNT,SUN_COUNT  FROM USER_PROFILE,(SELECT COALESCE(SUM(CASE WHEN WEEKDAY=0 THEN 1 ELSE 0 END ),0) AS MON_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=1 THEN 1 ELSE 0 END ),0) AS TUE_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=2 THEN 1 ELSE 0 END ),0) AS WED_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=3 THEN 1 ELSE 0 END ),0) AS THU_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=4 THEN 1 ELSE 0 END ),0) AS FRI_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=5 THEN 1 ELSE 0 END ),0) AS SAT_COUNT,COALESCE(SUM(CASE WHEN WEEKDAY=6 THEN 1 ELSE 0 END ),0) AS SUN_COUNT FROM HOLIDAYS WHERE DATE>=current_date AND DATE<=%s) AS T1)"+
					"SELECT USER_PROFILE.ID AS USER_ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.PHONE,USER_PROFILE.DEFAULT_ADDRESS_"+weekday[d.weekday()]+"_2 AS ADDRESS,USER_PROFILE.KITCHEN_ID_"+weekday[d.weekday()]+"_2 AS KITCHEN_ID,USER_PROFILE.INSTRUCTIONS_"+weekday[d.weekday()]+"_2 AS INSTRUCTIONS FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = %s AND MEAL_TIME = 'Evening') AS A,DAY,SKIP_MOR,SKIP_EVE,HOLI WHERE STATUS='Active' AND MEAL_TOKENS-(((%s-(MON_COUNT))*MONDAY_MEALS+(%s-(TUE_COUNT))*TUESDAY_MEALS+(%s-(WED_COUNT))*WEDNESDAY_MEALS+(%s-(THU_COUNT))*THURSDAY_MEALS+(%s-(FRI_COUNT))*FRIDAY_MEALS+(%s-(SAT_COUNT))*SATURDAY_MEALS)*(BREAKFAST+LUNCH+SNACKS+DINNER))-(%s*USER_PROFILE.SUNDAY_MEALS*(BREAKFAST+LUNCH+SNACKS+DINNER))+(SKIP_MOR.SKIPPER*(BREAKFAST+LUNCH))+(SKIP_EVE.SKIPPER*(SNACKS+DINNER))>0 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND (USER_FOOD_PREF.MEAL_TIME='Lunch' OR USER_FOOD_PREF.MEAL_TIME='Dinner') AND SKIP_MOR.USER_ID = A.USER_ID AND SKIP_EVE.USER_ID = A.USER_ID AND USER_PROFILE."+weekday[d.weekday()+1]+"_MEALS=1 AND USER_PROFILE.START_DATE<=%s)"+
					"(SELECT * FROM MEAL WHERE USER_ID NOT IN (SELECT USER_ID FROM DELIVERY_ADDRESS WHERE TIME_OF_DELIVERY = 'Evening' AND DATE= %s)) UNION (SELECT MEAL.USER_ID,MEAL.FIRST_NAME,MEAL.LAST_NAME,MEAL.PHONE,DELIVERY_ADDRESS.ADDRESS,DELIVERY_ZONES.KITCHEN_ID,DELIVERY_ADDRESS.INSTRUCTIONS FROM MEAL,DELIVERY_ADDRESS,DELIVERY_ZONES WHERE TIME_OF_DELIVERY = 'Evening' AND DATE= %s AND MEAL.USER_ID = DELIVERY_ADDRESS.USER_ID AND DELIVERY_ADDRESS.KITCHEN_ID = DELIVERY_ZONES.ID))"+
					"SELECT * FROM T1 UNION SELECT * FROM T2;",[d,d,d,d,d,d,d,w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat'],sun,d,d,d,d,d+datetime.timedelta(days=1),d+datetime.timedelta(days=1),d+datetime.timedelta(days=1),d+datetime.timedelta(days=1),d+datetime.timedelta(days=1),d+datetime.timedelta(days=1),w['Mon'],w['Tue'],w['Wed'],w['Thu'],w['Fri'],w['Sat']+1,sun,d+datetime.timedelta(days=1),d,d])				
		if cursor.rowcount >0:
			row = cursor.fetchall()
		else:
			row = []
	return row			
# Create your views here.
def export(request):
	if request.method == 'POST':
		da = request.POST.get('date')
		d = datetime.datetime.strptime(da, '%Y-%m-%d').date()
		ti = request.POST.get('time')
		t = request.POST.get('type')
		if d<=date.today():
			now = datetime.datetime.now()
			today11am = now.replace(hour=11, minute=0, second=0, microsecond=0)
			today6pm = now.replace(hour=18, minute=0, second=0, microsecond=0)
			d= date.today()
		if Holidays.objects.filter(date=d).count()==1 or d.weekday() == 6:
			q=[]
		elif d.weekday()==5:
			q = my_custom_sql(d,ti,t)
			q = q+(my_custom_sql(d+datetime.timedelta(days=1),ti,t))
		else:
			q = my_custom_sql(d,ti,t)
		if ti == 'Morning':
			s= { 'Morning':'selected','Evening':''}
		elif ti=='Evening':
			s= {'Morning':'','Evening':'selected'}
		if t=='summary':
			t = {'summary':'checked','detailed':''}
		else:
			t = {'summary':'','detailed':'checked'}
		c = { 'q': q, 'd' : datetime.date.strftime(d, "%Y-%m-%d") , 's' : s ,'t':t}
		return django_excel.make_response_from_array(q,'xlsx',200)
def order(request):
	if request.method == 'POST':
		da = request.POST.get('date')
		d = datetime.datetime.strptime(da, '%Y-%m-%d').date()
		ti = request.POST.get('time')
		t = request.POST.get('type')
		if d<=date.today():
			now = datetime.datetime.now()
			today11am = now.replace(hour=11, minute=0, second=0, microsecond=0)
			today6pm = now.replace(hour=18, minute=0, second=0, microsecond=0)
			d= date.today()
		if Holidays.objects.filter(date=d).count()==1 or d.weekday() == 6:
			q=[]
		elif d.weekday()==5:
			q = my_custom_sql(d,ti,t)
			q = q+(my_custom_sql(d+datetime.timedelta(days=1),ti,t))
		else:
			q = my_custom_sql(d,ti,t)
		if ti == 'Morning':
			s= { 'Morning':'selected','Evening':''}
		elif ti=='Evening':
			s= {'Morning':'','Evening':'selected'}
		if t=='summary':
			t = {'summary':'checked','detailed':''}
		else:
			t = {'summary':'','detailed':'checked'}
		c = { 'q': q, 'd' : datetime.date.strftime(d, "%Y-%m-%d") , 's' : s ,'t':t}
		return render(request,'management/Orders.html',context=c)
	else :
		now = datetime.datetime.now()
		d= date.today()
		ti = 'Morning'
		if Holidays.objects.filter(date=d).count()==1 or d.weekday()==6:
			q=[]
		else:
			q = my_custom_sql(d,ti,'detailed')
		s= { 'Morning':'selected','Evening':''}
		t = {'summary':'','detailed':'checked'}
		c = {'q':q,'d':datetime.date.strftime(d, "%Y-%m-%d"),'s':s,'t':t}
		return render(request,'management/Orders.html',context=c)
def order_address(request):
	if request.method == 'POST':
		da = request.POST.get('date')
		d = datetime.datetime.strptime(da, '%Y-%m-%d').date()
		if d<=date.today():
			d= date.today()
		ti = request.POST.get('time')
		if Holidays.objects.filter(date=d).count()==1 or d.weekday() == 6:
			q=[]
		else:
			q = my_custom_sql_address(d,ti)
		if ti == 'Morning':
			s= { 'Morning':'selected','Evening':''}
		elif ti=='Evening':
			s= { 'Morning':'','Evening':'selected'}
		c = { 'q': q, 'd' : datetime.date.strftime(d, "%Y-%m-%d") , 's' : s }
		return render(request,'management/address.html',context=c)
	else :
		d= date.today()
		ti = 'Morning'
		if Holidays.objects.filter(date=d).count()==1 or d.weekday() == 6:
			q=[]
		else:
			q = my_custom_sql_address(d,ti)
		s= { 'Morning':'selected','Evening':''}
		c = {'q':q,'d':datetime.date.strftime(d, "%Y-%m-%d"),'s':s}
		return render(request,'management/address.html',context=c)