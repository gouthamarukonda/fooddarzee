from django.db import connection
from celery import Celery
from celery.schedules import crontab
from management.models import Holidays
import datetime
from datetime import date

app = Celery()

@app.task
def update_mor_meal_tokens():
	d= date.today()
	weekday = ['MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY']
	if Holidays.objects.filter(date=d).count()==0 and d.weekday()!=6:
		with connection.cursor() as cursor:
			cursor.execute("WITH T1 AS(WITH BREAKFAST1 AS "
				+"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(current_date,'DAY') AS DATE)"+
				"SELECT USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Morning') AS A,DAY WHERE STATUS='Active' AND ((MEAL_TOKENS>0 AND BREAKFAST=1) OR (MEAL_TOKENS=1 AND BREAKFAST=2)) AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Breakfast' AND "+weekday[d.weekday()]+"_MEALS=1)"+
				"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE)"+
				"SELECT USERS1.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Breakfast' AND MENU.DIET_GOAL_MEAL_PLAN=USERS1.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USERS1.TYPE ),"+
				"BREAKFAST2 AS "+
				"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(CURRENT_DATE,'DAY') AS DATE)"+
				"SELECT USER_FOOD_PREF.ID AS FOO_ID,USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Morning') AS A,DAY WHERE STATUS='Active' AND MEAL_TOKENS>1 AND BREAKFAST=2 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Breakfast' AND "+weekday[d.weekday()]+"_MEALS=1)"+
				"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast') UNION (SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE))"+
				"SELECT USERS1.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Breakfast' AND MENU.DIET_GOAL_MEAL_PLAN=USERS1.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USERS1.TYPE ),"+
				"LUNCH1 AS "+
				"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(CURRENT_DATE,'DAY') AS DATE)"+
				"SELECT USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Morning') AS A,DAY WHERE STATUS='Active' AND MEAL_TOKENS-BREAKFAST>0 AND LUNCH=1 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Lunch' AND "+weekday[d.weekday()]+"_MEALS=1)"+
				"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Lunch') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Lunch' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE)"+
				"SELECT USALL.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1 AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Lunch' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE)(SELECT * FROM BREAKFAST1) UNION ( SELECT * FROM BREAKFAST2) UNION (SELECT * FROM LUNCH1))"+
				"INSERT INTO COMPLETED_ORDERS(USER_ID,DATE,DISHES_DELIVERED,NUMBER_OF_DISHES,TIME_OF_DELIVERY) SELECT USER_ID,DATE,STRING_AGG( DISH_ID::varchar(255),','),COUNT(*),'Morning' FROM T1 GROUP BY USER_ID,DATE;")
			cursor.execute("WITH SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE = current_date AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT COUNT(*) AS SKIPPER,USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE = current_date AND MEAL_TIME='Morning' GROUP BY USER_ID))"+
				"UPDATE USER_PROFILE "+
				"SET MEAL_TOKENS = (USER_PROFILE.MEAL_TOKENS-USER_PROFILE.BREAKFAST-USER_PROFILE.LUNCH+SKIP_MOR.SKIPPER*(USER_PROFILE.BREAKFAST+USER_PROFILE.LUNCH))"+
				"FROM  SKIP_MOR "+
				"WHERE STATUS='Active' AND MEAL_TOKENS>0 AND (BREAKFAST>0 OR LUNCH=1) AND "+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.ID=SKIP_MOR.USER_ID;")
			if d.weekday()==5:
				cursor.execute("WITH T1 AS(WITH BREAKFAST1 AS "
					+"(WITH USERS1 AS "+
					"(WITH USERS AS"+
					"(WITH DAY AS (SELECT TO_CHAR(current_date+1,'DAY') AS DATE)"+
					"SELECT USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Morning') AS A,DAY WHERE STATUS='Active' AND ((MEAL_TOKENS>0 AND BREAKFAST=1) OR (MEAL_TOKENS=1 AND BREAKFAST=2)) AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Breakfast' AND SUNDAY_MEALS=1)"+
					"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE)"+
					"SELECT USERS1.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Breakfast' AND MENU.DIET_GOAL_MEAL_PLAN=USERS1.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USERS1.TYPE ),"+
					"BREAKFAST2 AS "+
					"(WITH USERS1 AS "+
					"(WITH USERS AS"+
					"(WITH DAY AS (SELECT TO_CHAR(CURRENT_DATE+1,'DAY') AS DATE)"+
					"SELECT USER_FOOD_PREF.ID AS FOO_ID,USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Morning') AS A,DAY WHERE STATUS='Active' AND MEAL_TOKENS>1 AND BREAKFAST=2 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Breakfast' AND SUNDAY_MEALS=1)"+
					"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast') UNION (SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Breakfast' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE))"+
					"SELECT USERS1.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Breakfast' AND MENU.DIET_GOAL_MEAL_PLAN=USERS1.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USERS1.TYPE ),"+
					"LUNCH1 AS "+
					"(WITH USERS1 AS "+
					"(WITH USERS AS"+
					"(WITH DAY AS (SELECT TO_CHAR(CURRENT_DATE,'DAY') AS DATE)"+
					"SELECT USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Morning') AS A,DAY WHERE STATUS='Active' AND MEAL_TOKENS-BREAKFAST>0 AND LUNCH=1 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Lunch' AND SUNDAY_MEALS=1)"+
					"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Lunch') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Lunch' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE)"+
					"SELECT USALL.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1 AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Lunch' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE)(SELECT * FROM BREAKFAST1) UNION ( SELECT * FROM BREAKFAST2) UNION (SELECT * FROM LUNCH1))"+
					"INSERT INTO COMPLETED_ORDERS(USER_ID,DATE,DISHES_DELIVERED,NUMBER_OF_DISHES,TIME_OF_DELIVERY) SELECT USER_ID,DATE,STRING_AGG( DISH_ID::varchar(255),','),COUNT(*),'Morning' FROM T1 GROUP BY USER_ID,DATE;")
				cursor.execute("WITH SKIP_MOR AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE = current_date AND MEAL_TIME='Morning' GROUP BY USER_ID) UNION (SELECT COUNT(*) AS SKIPPER,USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE = current_date AND MEAL_TIME='Morning' GROUP BY USER_ID))"+
					"UPDATE USER_PROFILE "+
					"SET MEAL_TOKENS = (USER_PROFILE.MEAL_TOKENS-USER_PROFILE.BREAKFAST-USER_PROFILE.LUNCH+SKIP_MOR.SKIPPER*(USER_PROFILE.BREAKFAST+USER_PROFILE.LUNCH))"+
					"FROM  SKIP_MOR "+
					"WHERE STATUS='Active' AND MEAL_TOKENS>0 AND (BREAKFAST>0 OR LUNCH=1) AND SUNDAY_MEALS=1 AND USER_PROFILE.ID=SKIP_MOR.USER_ID;")
			cursor.execute("WITH D AS( SELECT USER_PROFILE.ID AS USER_ID,DEFAULT_ADDRESS_"+weekday[d.weekday()]+"_1 AS ADDRESS,0 AS COST FROM USER_PROFILE,COMPLETED_ORDERS WHERE USER_PROFILE.ID=COMPLETED_ORDERS.USER_ID AND COMPLETED_ORDERS.DATE=CURRENT_DATE AND COMPLETED_ORDERS.TIME_OF_DELIVERY='Morning' AND COMPLETED_ORDERS.USER_ID NOT IN (SELECT USER_ID FROM DELIVERY_ADDRESS WHERE TIME_OF_DELIVERY = 'Morning' AND DATE= CURRENT_DATE) UNION SELECT COMPLETED_ORDERS.USER_ID,ADDRESS,DELIVERY_ZONES.DELIVERY_COST AS COST FROM COMPLETED_ORDERS,DELIVERY_ADDRESS,DELIVERY_ZONES WHERE DELIVERY_ZONES.KITCHEN_ID=DELIVERY_ADDRESS.KITCHEN_ID AND COMPLETED_ORDERS.USER_ID = DELIVERY_ADDRESS.USER_ID AND COMPLETED_ORDERS.DATE=CURRENT_DATE AND DELIVERY_ADDRESS.DATE=CURRENT_DATE AND COMPLETED_ORDERS.TIME_OF_DELIVERY='Morning' AND DELIVERY_ADDRESS.TIME_OF_DELIVERY='Morning')"+
					"UPDATE COMPLETED_ORDERS SET ADDRESS=D.ADDRESS,DELIVERY_COST=D.COST FROM D WHERE COMPLETED_ORDERS.USER_ID=D.USER_ID AND COMPLETED_ORDERS.DATE=CURRENT_DATE AND COMPLETED_ORDERS.TIME_OF_DELIVERY='Morning")
			cursor.execute("UPDATE USER_PROFILE SET STATUS ='Inactive' WHERE MEAL_TOKENS<=0;")

@app.task
def update_eve_meal_tokens():
	d=date.today()
	weekday = ['MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY']
	if Holidays.objects.filter(date=d).count()==0 and d.weekday()!=6 :
		with connection.cursor() as cursor:
			cursor.execute("WITH T1 AS(WITH SNACKS1 AS "
				+"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(current_date,'DAY') AS DATE)"+
				"SELECT USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Evening') AS A,DAY WHERE STATUS='Active' AND ((MEAL_TOKENS>0 AND SNACKS=1) OR (MEAL_TOKENS=1 AND SNACKS=2)) AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Snacks' AND "+weekday[d.weekday()]+"_MEALS=1)"+
				"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE)"+
				"SELECT USERS1.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Snacks' AND MENU.DIET_GOAL_MEAL_PLAN=USERS1.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USERS1.TYPE ),"+
				"SNACKS2 AS "+
				"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(CURRENT_DATE,'DAY') AS DATE)"+
				"SELECT USER_FOOD_PREF.ID AS FOO_ID,USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Evening') AS A,DAY WHERE STATUS='Active' AND MEAL_TOKENS>1 AND SNACKS=2 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Snacks' AND "+weekday[d.weekday()]+"_MEALS=1)"+
				"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks') UNION (SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE))"+
				"SELECT USERS1.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Snacks' AND MENU.DIET_GOAL_MEAL_PLAN=USERS1.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USERS1.TYPE ),"+
				"DINNER AS "+
				"(WITH USERS1 AS "+
				"(WITH USERS AS"+
				"(WITH DAY AS (SELECT TO_CHAR(CURRENT_DATE,'DAY') AS DATE)"+
				"SELECT USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Evening') AS A,DAY WHERE STATUS='Active' AND MEAL_TOKENS-SNACKS>0 AND DINNER=1 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Dinner' AND "+weekday[d.weekday()]+"_MEALS=1)"+
				"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Dinner') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Dinner' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE)"+
				"SELECT USALL.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1 AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Dinner' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE)(SELECT * FROM SNACKS1) UNION ( SELECT * FROM SNACKS2) UNION (SELECT * FROM DINNER))"+
				"INSERT INTO COMPLETED_ORDERS(USER_ID,DATE,DISHES_DELIVERED,NUMBER_OF_DISHES,TIME_OF_DELIVERY) SELECT USER_ID,DATE,STRING_AGG( DISH_ID::varchar(255),','),COUNT(*),'Evening' FROM T1 GROUP BY USER_ID,DATE;")
			cursor.execute("WITH SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE = current_date AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT COUNT(*) AS SKIPPER,USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE = current_date AND MEAL_TIME='Evening' GROUP BY USER_ID))"+
				"UPDATE USER_PROFILE "+
				"SET MEAL_TOKENS=(USER_PROFILE.MEAL_TOKENS-USER_PROFILE.SNACKS-USER_PROFILE.DINNER+SKIP_EVE.SKIPPER*(USER_PROFILE.SNACKS+USER_PROFILE.DINNER)) "+
				"FROM  SKIP_EVE "+
				"WHERE STATUS='Active' AND MEAL_TOKENS>0 AND (SNACKS>0 OR DINNER=1) AND "+weekday[d.weekday()]+"_MEALS=1 AND USER_PROFILE.ID=SKIP_EVE.USER_ID;")
			if d.weekday()==5:
				cursor.execute("WITH T1 AS(WITH SNACKS1 AS "
					+"(WITH USERS1 AS "+
					"(WITH USERS AS"+
					"(WITH DAY AS (SELECT TO_CHAR(current_date,'DAY') AS DATE)"+
					"SELECT USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Evening') AS A,DAY WHERE STATUS='Active' AND ((MEAL_TOKENS>0 AND SNACKS=1) OR (MEAL_TOKENS=1 AND SNACKS=2)) AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Snacks' AND SUNDAY_MEALS=1)"+
					"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE)"+
					"SELECT USERS1.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Snacks' AND MENU.DIET_GOAL_MEAL_PLAN=USERS1.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USERS1.TYPE ),"+
					"SNACKS2 AS "+
					"(WITH USERS1 AS "+
					"(WITH USERS AS"+
					"(WITH DAY AS (SELECT TO_CHAR(CURRENT_DATE,'DAY') AS DATE)"+
					"SELECT USER_FOOD_PREF.ID AS FOO_ID,USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Evening') AS A,DAY WHERE STATUS='Active' AND MEAL_TOKENS>1 AND SNACKS=2 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Snacks' AND SUNDAY_MEALS=1)"+
					"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks') UNION (SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Snacks' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE))"+
					"SELECT USERS1.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Snacks' AND MENU.DIET_GOAL_MEAL_PLAN=USERS1.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USERS1.TYPE ),"+
					"DINNER AS "+
					"(WITH USERS1 AS "+
					"(WITH USERS AS"+
					"(WITH DAY AS (SELECT TO_CHAR(CURRENT_DATE,'DAY') AS DATE)"+
					"SELECT USER_FOOD_PREF.TYPE,USER_PROFILE.ID,USER_PROFILE.FIRST_NAME,USER_PROFILE.LAST_NAME,USER_PROFILE.DIET_GOAL_MEAL_PLAN AS DIET_GOAL_MEAL_PLAN_ID FROM USER_FOOD_PREF,USER_PROFILE,(SELECT ID AS USER_ID FROM USER_PROFILE EXCEPT SELECT USER_ID FROM SKIP_MEAL WHERE DATE  = CURRENT_DATE AND MEAL_TIME = 'Evening') AS A,DAY WHERE STATUS='Active' AND MEAL_TOKENS-SNACKS>0 AND DINNER=1 AND USER_PROFILE.ID = A.USER_ID AND USER_FOOD_PREF.USER_ID=USER_PROFILE.ID AND USER_FOOD_PREF.WEEKDAY=initcap(TRIM(DAY.DATE))::time_3 AND USER_FOOD_PREF.MEAL_TIME='Dinner' AND SUNDAY_MEALS=1)"+
					"SELECT USERS.ID AS USER_ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,USERS.TYPE FROM USERS WHERE ID NOT IN (SELECT USER_ID FROM MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.DATE = CURRENT_DATE AND MEAL_PREF_CHANGE.MEAL_TIME='Dinner') UNION SELECT USERS.ID,USERS.FIRST_NAME,USERS.LAST_NAME,USERS.DIET_GOAL_MEAL_PLAN_ID,MEAL_PREF_CHANGE.TYPE FROM USERS,MEAL_PREF_CHANGE WHERE MEAL_PREF_CHANGE.USER_ID=USERS.ID AND MEAL_PREF_CHANGE.MEAL_TIME='Dinner' AND MEAL_PREF_CHANGE.DATE = CURRENT_DATE)"+
					"SELECT USALL.USER_ID,MENU.DISH_ID,MENU.DATE FROM MENU,USERS1 AS USALL,CALORIE_FORMULAE  WHERE MENU.DATE = CURRENT_DATE AND MENU.MEAL_TIME='Dinner' AND MENU.DIET_GOAL_MEAL_PLAN=USALL.DIET_GOAL_MEAL_PLAN_ID AND MENU.TYPE = USALL.TYPE)(SELECT * FROM SNACKS1) UNION ( SELECT * FROM SNACKS2) UNION (SELECT * FROM DINNER))"+
					"INSERT INTO COMPLETED_ORDERS(USER_ID,DATE,DISHES_DELIVERED,NUMBER_OF_DISHES,TIME_OF_DELIVERY) SELECT USER_ID,DATE,STRING_AGG( DISH_ID::varchar(255),','),COUNT(*),'Evening' FROM T1 GROUP BY USER_ID,DATE;")
				cursor.execute("WITH SKIP_EVE AS (SELECT ID AS USER_ID,0 AS SKIPPER FROM USER_PROFILE WHERE ID NOT IN (SELECT USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE = current_date AND MEAL_TIME='Evening' GROUP BY USER_ID) UNION (SELECT COUNT(*) AS SKIPPER,USER_ID FROM SKIP_MEAL WHERE SKIP_MEAL.DATE = current_date AND MEAL_TIME='Evening' GROUP BY USER_ID))"+
					"UPDATE USER_PROFILE "+
					"SET MEAL_TOKENS=(USER_PROFILE.MEAL_TOKENS-USER_PROFILE.SNACKS-USER_PROFILE.DINNER+SKIP_EVE.SKIPPER*(USER_PROFILE.SNACKS+USER_PROFILE.DINNER)) "+
					"FROM  SKIP_EVE "+
					"WHERE STATUS='Active' AND MEAL_TOKENS>0 AND (SNACKS>0 OR DINNER=1) AND SUNDAY_MEALS=1 AND USER_PROFILE.ID=SKIP_EVE.USER_ID;")
			cursor.execute("WITH D AS( SELECT USER_PROFILE.ID AS USER_ID,DEFAULT_ADDRESS_"+weekday[d.weekday()]+"_2 AS ADDRESS,0 AS COST FROM USER_PROFILE,COMPLETED_ORDERS WHERE USER_PROFILE.ID=COMPLETED_ORDERS.USER_ID AND COMPLETED_ORDERS.DATE=CURRENT_DATE AND COMPLETED_ORDERS.TIME_OF_DELIVERY='Evening' AND COMPLETED_ORDERS.USER_ID NOT IN (SELECT USER_ID FROM DELIVERY_ADDRESS WHERE TIME_OF_DELIVERY = 'Evening' AND DATE= CURRENT_DATE) UNION SELECT COMPLETED_ORDERS.USER_ID,ADDRESS,DELIVERY_ZONES.DELIVERY_COST AS COST FROM COMPLETED_ORDERS,DELIVERY_ADDRESS,DELIVERY_ZONES WHERE DELIVERY_ZONES.KITCHEN_ID=DELIVERY_ADDRESS.KITCHEN_ID AND COMPLETED_ORDERS.USER_ID = DELIVERY_ADDRESS.USER_ID AND COMPLETED_ORDERS.DATE=CURRENT_DATE AND DELIVERY_ADDRESS.DATE=CURRENT_DATE AND COMPLETED_ORDERS.TIME_OF_DELIVERY='Evening' AND DELIVERY_ADDRESS.TIME_OF_DELIVERY='Evening')"+
					"UPDATE COMPLETED_ORDERS SET ADDRESS=D.ADDRESS,DELIVERY_COST=D.COST FROM D WHERE COMPLETED_ORDERS.USER_ID=D.USER_ID AND COMPLETED_ORDERS.DATE=CURRENT_DATE AND COMPLETED_ORDERS.TIME_OF_DELIVERY='Evening")
			cursor.execute("UPDATE USER_PROFILE SET STATUS ='Inactive' WHERE MEAL_TOKENS<=0;")


@app.task
def update_days_of_plan():
	with connection.cursor() as cursor:
		cursor.execute("WITH T1 AS (UPDATE USER_PROFILE SET NUM_DAYS=USER_PROFILE.NUM_DAYS+UPGRADE_PLAN.NUM_DAYS_EXTENDED, DUE_AMOUNT=USER_PROFILE.DUE_AMOUNT+UPGRADE_PLAN.DUE_AMOUNT, PAYMENT_STATUS=CASE WHEN USER_PROFILE.DUE_AMOUNT+UPGRADE_PLAN.DUE_AMOUNT<0 THEN 'Due' ELSE 'Paid' END, MEAL_TOKENS=USER_PROFILE.MEAL_TOKENS+(UPGRADE_PLAN.NUM_DAYS_EXTENDED*(BREAKFAST+LUNCH+SNACKS+DINNER)) FROM UPGRADE_PLAN WHERE USER_PROFILE.ID=UPGRADE_PLAN.USER_ID AND UPGRADE_PLAN.UPGRADE_STATUS='Not upgraded' RETURNING *) UPDATE UPGRADE_PLAN SET UPGRADE_STATUS='Upgraded' FROM T1 WHERE UPGRADE_PLAN.USER_ID=T1.USER_ID;")

@app.task
def update_new_plan():
	with connection.cursor() as cursor:
		cursor.execute("WITH T1 AS (UPDATE USER_PROFILE SET NUM_DAYS=NEW_PLAN.NUM_DAYS, DUE_AMOUNT = USER_PROFILE.DUE_AMOUNT+NEW_PLAN.DUE_AMOUNT,START_DATE = CURRENT_DATE, DIET_GOAL_MEAL_PLAN=NEW_PLAN.DIET_GOAL_MEAL_PLAN_ID,BREAKFAST=NEW_PLAN.BFT, LUNCH=NEW_PLAN.LNCH, SNACKS=NEW_PLAN.SNK, DINNER=NEW_PLAN.DNR, STATUS='Active', PAYMENT_STATUS=CASE WHEN (USER_PROFILE.DUE_AMOUNT+NEW_PLAN.DUE_AMOUNT)<0 THEN 'Due' ELSE 'Paid' END, TOTAL_COST=NEW_PLAN.TOTAL_PRICE, CALORIES=NEW_PLAN.CALORIES,TOTAL_CALORIE_INTAKE=NEW_PLAN.TOTAL_CALORIE_INTAKE , HEIGHT=NEW_PLAN.HEIGHT, WEIGHT=NEW_PLAN.WEIGHT, FAT_PERCENTAGE=NEW_PLAN.FAT_PERCENTAGE, SUNDAY_MEALS=NEW_PLAN.SUNDAY_MEALS, MONDAY_MEALS=NEW_PLAN.MONDAY_MEALS,TUESDAY_MEALS=NEW_PLAN.TUESDAY_MEALS,WEDNESDAY_MEALS=NEW_PLAN.WEDNESDAY_MEALS,THURSDAY_MEALS=NEW_PLAN.THURSDAY_MEALS,FRIDAY_MEALS=NEW_PLAN.FRIDAY_MEALS,SATURDAY_MEALS=NEW_PLAN.SATURDAY_MEALS, DEXA=NEW_PLAN.DEXA, SCHEDULE_DEXA=NEW_PLAN.SCHEDULE_DEXA,DEFAULT_ADDRESS_MONDAY_1=NEW_PLAN.DEFAULT_ADDRESS_MONDAY_1,GEOCODE_MONDAY_1=NEW_PLAN.GEOCODE_MONDAY_1,INSTRUCTIONS_MONDAY_1=NEW_PLAN.INSTRUCTIONS_MONDAY_1,DEFAULT_ADDRESS_TUESDAY_1=NEW_PLAN.DEFAULT_ADDRESS_TUESDAY_1,GEOCODE_TUESDAY_1=NEW_PLAN.GEOCODE_TUESDAY_1,INSTRUCTIONS_TUESDAY_1=NEW_PLAN.INSTRUCTIONS_TUESDAY_1,DEFAULT_ADDRESS_WEDNESDAY_1=NEW_PLAN.DEFAULT_ADDRESS_WEDNESDAY_1,GEOCODE_WEDNESDAY_1=NEW_PLAN.GEOCODE_WEDNESDAY_1,INSTRUCTIONS_WEDNESDAY_1=NEW_PLAN.INSTRUCTIONS_WEDNESDAY_1,DEFAULT_ADDRESS_THURSDAY_1=NEW_PLAN.DEFAULT_ADDRESS_THURSDAY_1,GEOCODE_THURSDAY_1=NEW_PLAN.GEOCODE_THURSDAY_1,INSTRUCTIONS_THURSDAY_1=NEW_PLAN.INSTRUCTIONS_THURSDAY_1,DEFAULT_ADDRESS_FRIDAY_1=NEW_PLAN.DEFAULT_ADDRESS_FRIDAY_1,GEOCODE_FRIDAY_1=NEW_PLAN.GEOCODE_FRIDAY_1,INSTRUCTIONS_FRIDAY_1=NEW_PLAN.INSTRUCTIONS_FRIDAY_1,DEFAULT_ADDRESS_SATURDAY_1=NEW_PLAN.DEFAULT_ADDRESS_SATURDAY_1,GEOCODE_SATURDAY_1=NEW_PLAN.GEOCODE_SATURDAY_1,INSTRUCTIONS_SATURDAY_1=NEW_PLAN.INSTRUCTIONS_SATURDAY_1,DEFAULT_ADDRESS_MONDAY_2=NEW_PLAN.DEFAULT_ADDRESS_MONDAY_2,GEOCODE_MONDAY_2=NEW_PLAN.GEOCODE_MONDAY_2,INSTRUCTIONS_MONDAY_2=NEW_PLAN.INSTRUCTIONS_MONDAY_2,DEFAULT_ADDRESS_TUESDAY_2=NEW_PLAN.DEFAULT_ADDRESS_TUESDAY_2,GEOCODE_TUESDAY_2=NEW_PLAN.GEOCODE_TUESDAY_2,INSTRUCTIONS_TUESDAY_2=NEW_PLAN.INSTRUCTIONS_TUESDAY_2,DEFAULT_ADDRESS_WEDNESDAY_2=NEW_PLAN.DEFAULT_ADDRESS_WEDNESDAY_2,GEOCODE_WEDNESDAY_2=NEW_PLAN.GEOCODE_WEDNESDAY_2,INSTRUCTIONS_WEDNESDAY_2=NEW_PLAN.INSTRUCTIONS_WEDNESDAY_2,DEFAULT_ADDRESS_THURSDAY_2=NEW_PLAN.DEFAULT_ADDRESS_THURSDAY_2,GEOCODE_THURSDAY_2=NEW_PLAN.GEOCODE_THURSDAY_2,INSTRUCTIONS_THURSDAY_2=NEW_PLAN.INSTRUCTIONS_THURSDAY_2,DEFAULT_ADDRESS_FRIDAY_2=NEW_PLAN.DEFAULT_ADDRESS_FRIDAY_2,GEOCODE_FRIDAY_2=NEW_PLAN.GEOCODE_FRIDAY_2,INSTRUCTIONS_FRIDAY_2=NEW_PLAN.INSTRUCTIONS_FRIDAY_2,DEFAULT_ADDRESS_SATURDAY_2=NEW_PLAN.DEFAULT_ADDRESS_SATURDAY_2,GEOCODE_SATURDAY_2=NEW_PLAN.GEOCODE_SATURDAY_2,INSTRUCTIONS_SATURDAY_2=NEW_PLAN.INSTRUCTIONS_SATURDAY_2 FROM NEW_PLAN WHERE NEW_PLAN.START_DATE<=(CURRENT_DATE at time zone 'Asia/Kolkata')::DATE AND NEW_PLAN.NEW_PLAN_STATUS='Not started' AND NEW_PLAN.USER_ID=USER_PROFILE.ID RETURNING *) UPDATE NEW_PLAN SET NEW_PLAN_STATUS='Started' FROM T1 WHERE NEW_PLAN.USER_ID=T1.USER_ID;")